go.property('gravity', 650) -- TODO: not quite sure if this is qualifies as gravity
go.property('max_falling_speed', 500)
go.property('flap_force', 280)

function init(self)
	msg.post('.', 'acquire_input_focus')
	
	self.y_vel = 0
	self.score = 0
	self.dead = false
end

function dead(self)
	if not self.dead then -- To avoid playing the sound infinitively
		sound.play('#hit_sound')

		-- Stop the animation and set the frame current frame to the first one
		go.set('#sprite', 'playback_rate', 0)
		go.set('#sprite', 'cursor', 0)

		-- Stop moving the ground
		msg.post('/ground1', 'stop')
		msg.post('/ground2', 'stop')

		-- Stop moving the pipes
		msg.post('/pipes', 'stop')

		-- Hide the game HUD
		msg.post('/interface', 'disable')

		-- Display the game over UI
		msg.post('/interface_game_over', 'set_score', {self.score}) -- First set score so it can calculate the medal
		msg.post('/interface_game_over', 'enable')

		-- Save score
		local save_file = sys.get_save_file('flappydefold', 'data')
		local highscore = sys.load(save_file)

		if highscore[1] then
			if self.score > highscore[1]  then
				msg.post('/interface_game_over', 'new_highscore')
				sys.save(save_file, {self.score})
			end
		else
			sys.save(save_file, {self.score}) -- Save the score anyway since it'll mean the highscore isn't set
		end
	end

	self.dead = true
	msg.post('.', 'release_input_focus')
end

function flap(self)
	sound.play('#flap_sound')
	self.y_vel = self.flap_force
end

function update_score(self)
	msg.post('/interface', 'set_score', {self.score})
end

function update(self, dt)
	if self.dead then return end
	
	local pos = go.get_position()
	pos.y = pos.y + self.y_vel * dt
	if self.y_vel > -self.max_falling_speed then
		self.y_vel = self.y_vel - self.gravity * dt 
	end
	
	go.set_position(pos)

	-- TODO: Maybe it'll be better to update the score only when it changes
	update_score(self)
end
	
function on_message(self, message_id, message, sender)
	if message_id == hash('collision_response') then
		dead(self)
	end

	if message_id == hash('gained_score') then
		self.score = self.score + 1
		sound.play('#score_sound')
	end

	-- Received when trying to pass the pipes by going
	-- off screen
	-- TODO: Refactor this
	if message_id == hash('death_off_bounds') then
		dead(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash('flap_mouse') or action_id == hash('flap_key') then
		if action.pressed then
			flap(self)
		end
	end
end