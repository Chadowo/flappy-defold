go.property("gravity", 150)
go.property("max_y_vel", 10)

function init(self)
	self.score = 0
	
	self.flapped = false
	self.y_vel = 0
	
	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	msg.post("/ui#game", "update_score", { score = self.score })

	if self.y_vel <= 0 then
		-- Fall
		new_position = go.get_position(bird)
		new_position.y = new_position.y - self.gravity * dt

		go.set_position(new_position, bird)
	elseif self.y_vel > 0 then
		new_position = go.get_position(bird)
		new_position.y = new_position.y + self.y_vel * dt

		self.y_vel = self.y_vel - 0.1 * dt
	end

	out_of_bounds()
end

function out_of_bounds()
	pos = go.get_position(bird)
	size = go.get('bird#sprite', 'size')

	-- Asumming the position has the center of the game object as origin, we'll
	-- need half the height for it detect when the whole sprite is out of bounds
	if pos.y + (size.y / 2) <= 0 then
		print('dead')
	end
end

function jump(self)
	self.y_vel = self.max_y_vel
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		jump(self)
	end

	return true -- Consume input
end