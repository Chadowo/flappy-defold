local hashes = require('main/modules/hashes')
local utils = require('main/modules/utils')

function init(self)
	msg.post('.', 'acquire_input_focus')
	
	self.started = false

	-- The target score holds the correct score, the current and displayed variables
	-- are just for counting up to the target score when displaying the player's score
	-- NOTE: I've taken the implementation of the score counter from one of Defold's 
	--             own tutorials here: https://defold.com/tutorials/hud/ - Cool stuff!
	self.target_score = 0
	self.current_score = 0
	self.displayed_score = 0
	
	self.score_increase_speed = 25

	gui.set_enabled(gui.get_node('root'), false)
	gui.set_alpha(gui.get_node('title'), 0.0)
	gui.set_alpha(gui.get_node('button'), 0.0)
end

function update(self, dt)
	-- If we started displaying the game over GUI and the current score is 
	-- less than the target
	if self.started and self.current_score < self.target_score then
		self.current_score = self.current_score + self.score_increase_speed   * dt
		self.current_score = utils.clamp(self.current_score, 0, self.target_score)
		local floored_score = math.floor(self.current_score) -- To cut off decimals

		-- Update displayed score in case it's different to the floored score
		if self.displayed_score ~= floored_score then
			self.displayed_score = floored_score
			gui.set_text(gui.get_node('score'), self.displayed_score )
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hashes.APPEAR then
		gui.set_enabled(gui.get_node('root'), true)

		local score = self.target_score 
		
		-- Calculate the reward medal
		if score < 10 then -- None
			gui.set_enabled(gui.get_node('medal'), false)
			-- TODO: randomize position on animation loop
			gui.set_enabled(gui.get_node('spark'), false)
		elseif score >= 10 and  score < 20 then -- Bronze
			-- Leave the medal as it is since the default texture is bronze
		elseif score >= 20 and score < 30 then -- Silver
			gui.play_flipbook(gui.get_node('medal'), 'medal_silver')
		elseif score >= 30 and score < 40 then -- Gold
			gui.play_flipbook(gui.get_node('medal'), 'medal_gold')
		elseif score >= 40 then -- Platinum
			gui.play_flipbook(gui.get_node('medal'), 'medal_platinum')
		end
		
		-- Load highscore
		local save_file = sys.get_save_file('flappydefold', 'data')
		local data = sys.load(save_file)
		if data[1] then
			gui.set_text(gui.get_node('highscore'), data[1])
		end

		gui.animate(gui.get_node('title'), 'color.w', 1, gui.EASING_LINEAR, 0.2)
		gui.animate(gui.get_node('panel'), 'position.y', 40, gui.EASING_OUTCUBIC, 0.6, 0.2)
		gui.animate(gui.get_node('button'), 'color.w', 
					1, gui.EASING_LINEAR,
					0.5, 0.8,
					function() self.started = true end)
	end

	if message_id == hashes.SET_SCORE then
		self.target_score = message[1]
		--gui.set_text(gui.get_node('score'), message[1])
	end

	if message_id == hashes.NEW_HIGHSCORE then
		gui.set_enabled(gui.get_node('label_new'), true)
	end
end

function on_input(self, action_id, action)
	if not self.started then
		return
	end
	
	if action_id == hashes.FLAP_MOUSE then
		if gui.pick_node(gui.get_node('button'), action.x, action.y) then
			if action.pressed then
				msg.post('main:/controller#controller', 'end_game')
			end
		end
	elseif action_id == hashes.FLAP_KEY and action.pressed then
		msg.post('main:/controller#controller', 'end_game')
	end
end